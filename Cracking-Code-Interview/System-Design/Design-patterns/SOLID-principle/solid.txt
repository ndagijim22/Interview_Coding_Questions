The SOLID principles are a set of five design principles that aim to guide the creation of 
well-structured and maintainable software systems. These principles were introduced by 
Robert C. Martin and provide a foundation for writing code that is easy to understand, 
extend, and modify. The SOLID principles are:

   1. Single Responsibility Principle (SRP):
        A class should have only one reason to change, meaning it should have only one 
        responsibility. This principle promotes the idea that a class should do one thing 
        and do it well. Separating concerns helps to keep the codebase more maintainable and 
        easier to modify.

    2. Open/Closed Principle (OCP):
        Software entities (classes, modules, functions, etc.) should be open for extension 
        but closed for modification. In other words, you should be able to add new 
        functionality to a system without altering existing code. This principle encourages 
        the use of abstraction and polymorphism to achieve flexibility.

    3. Liskov Substitution Principle (LSP):
        Objects of a derived class should be able to replace objects of the base class without affecting 
        the correctness of the program. In simpler terms, if a class is a subclass of another class, 
        it should be able to be used interchangeably with its base class without causing issues.

    4. Interface Segregation Principle (ISP):
        Clients should not be forced to depend on interfaces they do not use. This principle emphasizes 
        creating fine-grained, client-specific interfaces rather than large, monolithic ones. 
        This prevents classes from being burdened with methods they don't need.

    5. Dependency Inversion Principle (DIP):
        High-level modules should not depend on low-level modules. Both should depend on abstractions. 
        Abstractions should not depend on details; details should depend on abstractions. 
        This principle encourages the use of interfaces or abstract classes to define contracts, 
        which allows for better flexibility and easier testing.

These principles work together to promote software design that is modular, flexible, and maintainable.
 Applying the SOLID principles can help prevent common issues such as tightly coupled code, 
 code that is difficult to modify, and difficulties in extending functionality. 
 While the principles are generally applied in object-oriented programming, 
 their concepts can be adapted to other programming paradigms as well.